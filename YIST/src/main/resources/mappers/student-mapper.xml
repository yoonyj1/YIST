<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="studentMapper">

	<resultMap id="examResultSet" type="ExamS">
		<result column="test_no" property="testNo"></result>
		<result column="id" property="id"></result>
		<result column="subject_no" property="subjectNo"></result>
		<result column="test_title" property="testTitle"></result>
		<result column="exam_date" property="examDate"></result>
		<result column="exam_time" property="examTime"></result>
		<result column="status" property="status"></result>
		<result column="q1" property="q1"></result>
		<result column="q2" property="q2"></result>
		<result column="q3" property="q3"></result>
		<result column="q4" property="q4"></result>
		<result column="q5" property="q5"></result>
		<result column="student_id" property="studentId"></result>
		<result column="a1" property="a1"></result>
		<result column="a2" property="a2"></result>
		<result column="a3" property="a3"></result>
		<result column="a4" property="a4"></result>
		<result column="a5" property="a5"></result>
	</resultMap>

	<resultMap type="Notice" id="noticeResultSet">
		<result column="board_no" property="boardNo" />
		<result column="board_title" property="boardTitle" />
		<result column="board_writer" property="boardWriter" />
		<result column="board_content" property="boardContent" />
		<result column="origin_Name" property="originName" />
		<result column="change_name" property="changeName" />
		<result column="count" property="count" />
		<result column="create_date" property="createDate" />
		<result column="status" property="status" />
		<result column="views" property="views" />
	</resultMap>

	<resultMap type="Material" id="materialResultSet">
		<result column="board_no" property="boardNo" />
		<result column="class_no" property="classNo" />
		<result column="board_title" property="boardTitle" />
		<result column="board_writer" property="boardWriter" />
		<result column="board_content" property="boardContent" />
		<result column="origin_name" property="originName" />
		<result column="change_name" property="changeName" />
		<result column="count" property="count" />
		<result column="create_date" property="createDate" />
		<result column="status" property="status" />
	</resultMap>

	<resultMap type="TaskS" id="taskResultSet">
		<result column="task_no" property="taskNo" />
		<result column="subject_no" property="subjectNo" />
		<result column="id" property="id" />
		<result column="task_title" property="taskTitle" />
		<result column="task_content" property="taskContent" />
		<result column="start_date" property="startDate" />
		<result column="end_date" property="endDate" />
		<result column="student_id" property="studentId" />
		<result column="submit_content" property="submitContent" />
		<result column="submit_date" property="submitDate" />
		<result column="modify_date" property="modifyDate" />
		<result column="status" property="status" />
		<result column="origin_name" property="originName" />
		<result column="change_name" property="changeName" />
	</resultMap>

	<resultMap type="TaskSubmitS" id="TaskSubmitResultSet">
		<result column="task_no" property="taskNo" />
		<result column="student_id" property="studentId" />
		<result column="submit_content" property="submitContent" />
		<result column="submit_date" property="submitDate" />
		<result column="modify_date" property="modifyDate" />
		<result column="status" property="status" />
	</resultMap>

	<resultMap id="alarmResultSet" type="Alarm">
		<result column="alarm_no" property="alarmNo"></result>
		<result column="id" property="id"></result>
		<result column="alarm_content" property="alarmContent"></result>
		<result column="alarm_type" property="alarmType"></result>
		<result column="status" property="status"></result>
		<result column="create_date" property="createDate"></result>
	</resultMap>

	<resultMap type="Qna" id="qnaResultSet">
		<result column="board_no" property="boardNo" />
		<result column="board_title" property="boardTitle" />
		<result column="board_writer" property="boardWriter" />
		<result column="board_content" property="boardContent" />
		<result column="origin_name" property="originName" />
		<result column="change_name" property="changeName" />
		<result column="count" property="count" />
		<result column="create_date" property="createDate" />
		<result column="status" property="status" />
		<result column="views" property="views" />
		<result column="answer" property="answer" />
	</resultMap>

<resultMap type="Member" id="memberResultSet">
	<result column="ID" property="id"/>
	<result column="NAME" property="name"/>
	<result column="PWD" property="pwd"/>
	<result column="SUBJECT" property="subject"/>
	<result column="START_DATE" property="startDate"/>
	<result column="END_DATE" property="endDate"/>
	<result column="STATUS" property="status"/>
	<result column="SORT" property="sort"/>
	<result column="SUBJECT_NAME" property="subjectName"/>
	<result column="ATTENDANCE_RATE" property="attendanceRate"/>
</resultMap>

<resultMap type="AttendanceS" id="attendanceResultSet">
	<result column="id" property="id"/>
	<result column="count" property="count"/>
	<result column="attendance_date" property="attendanceDate"/>
	<result column="status" property="status"/>
	<result column="subject_no" property="subjectNo"/>
</resultMap>

<select id="selectIns" resultMap="memberResultSet">
	select 
		   name
         , m.subject_name
         , to_char(m.start_date, 'YYYY-MM-DD') as "start_date"
         , to_char(m.end_date, 'YYYY-MM-DD') as "end_date"
	  from member m
      join subject on (subject = subject_no)
     where subject = #{subject}
   	   and sort = 2
</select>

<select id="selectAtt" resultMap="attendanceResultSet">
	select
	       attendance_date
	     , status
	  from attendance
	 where id = #{id}
</select>
<select id="selectAttDay" resultMap="attendanceResultSet">
	select
	       id
	     , sum(count) as "count"
	  from attendance
	 group by rollup(id)
	having id = #{id}
</select>
<select id="selectAttTotal" resultMap="attendanceResultSet">
	SELECT (end_date - start_date) AS dayCount 
	FROM member
	where id = #{id}
</select>

<!-- 메인 공지사항 목록 조회 -->
<select id="mainNotice" resultMap="noticeResultSet">
	<![CDATA[
	select *
	  from
	     (
	       select 
	       		   board_no
			     , board_title
			     , to_char(create_date, 'YYYY-MM-DD') as "create_date"
			  from notice
			 order
			    by create_date desc
	     )
	 where rownum <= 7
	 ]]>
</select>

<!-- 시험 목록 조회 -->
<select id="testList" resultMap="examResultSet">
    select
	       e.test_no
	     , id
	     , subject_no
	     , test_title
	     , exam_time
         , score
         , ea.status
	  from exam e
      join exam_answer ea on (e.test_no = ea.test_no)
      where e.status = 'N' 
        and subject_no = #{subject}
        and student_id = #{id}
    order by e.test_no
</select>

<!-- 시험 상세 조회 -->
<select id="testDetail" resultMap="examResultSet">
	select
	       test_title
	     , q1
	     , q2
	     , q3
	     , q4
	     , q5
	     , exam_time
	  from exam e 
      join exam_question q on e.test_no = q.test_no
	 where e.test_no = #{testNo}
</select>

<!-- 시험 제출 -->
<update id="testInsert">
	update exam_answer
		set a1 = #{a1}
		  , a2 = #{a2}
		  , a3 = #{a3}
		  , a4 = #{a4}
		  , a5 = #{a5}
		  , status = 'Y'
	where test_no = #{testNo} and student_id = #{studentId}
</update>

<!-- 공지사항 목록 조회 -->
<select id="noticeListCount" resultType="_int">
	select
		   count(*)
	  from notice
	 where status = 'Y'
	   and views = 3
</select>

<update id="increaseCount">
	update
	       notice
	   set count = count + 1
	 where board_no = #{boardNo}
	   and status = 'Y'
</update>

<select id="selectList" resultMap="noticeResultSet">
	select
	       board_no
	     , board_title
	     , board_writer
	     , to_char(create_date, 'YYYY-MM-DD') as "create_date"
	     , count
	  from notice
	 where status = 'Y'
	 order
	    by board_no desc
</select>

<!-- 공지사항 상세 조회 -->
<select id="selectNotice" resultMap="noticeResultSet">
	select
		   board_no
		 , board_title
	     , board_writer
	     , to_char(create_date, 'YYYY-MM-DD') as "create_date"
	     , board_content
	  from notice
	 where board_no = #{boardNo}
</select>

<select id="noticeSearchCount" resultType="_int">
	select
			count(*)
	  from
	  		(
	  				select
					       board_no
					     , board_title
					     , board_writer
					     , to_char(create_date, 'YYYY-MM-DD') as "create_date"
					     , count
					  from notice
					 where status = 'Y'
	 <if test="condition == 'writer'">
	   and board_writer 
	 </if>
	 <if test="condition == 'title'">
	   and board_title
	 </if>
	 <if test="condition == 'content'">
	   and board_content
	 </if>
	   like '%' || #{ keyword } || '%'
	)
</select>

<select id="noticeSearchList" resultMap="noticeResultSet">
	select
	       board_no
	     , board_title
	     , board_writer
	     , to_char(create_date, 'YYYY-MM-DD') as "create_date"
	     , count
	  from notice
	 where status = 'Y'
	<choose>
	 	<when test="condition == 'writer'">
	   and board_writer 
	 	</when>
	 	<when test="condition == 'title'">
	   and board_title
	 	</when>
		<otherwise>
	   and board_content
		</otherwise>
	 </choose>
	   	   like '%' || #{ keyword } || '%'
	 order
	    by board_no desc	
</select>

	<!-- 시험 목록 조회 -->
	<select id="testList" resultMap="examResultSet">
		select
		e.test_no
		, id
		, subject_no
		, test_title
		, exam_time
		, score
		, ea.status
		from exam e
		join exam_answer ea on (e.test_no = ea.test_no)
		where e.status = 'N'
		and subject_no = #{subject}
		and student_id = #{id}
		order by e.test_no
	</select>

	<!-- 시험 상세 조회 -->
	<select id="testDetail" resultMap="examResultSet">
		select
		test_title
		, q1
		, q2
		, q3
		, q4
		, q5
		, exam_time
		from exam e
		join exam_question q on e.test_no = q.test_no
		where e.test_no = #{testNo}
	</select>

<select id="videoSearchCount" resultType="_int">
  select count(*)
	  from (
	    select
	      video_no,
	      video_title,
	      video_writer,
	      video_content,
	      video_src,
	      to_char(create_date, 'YYYY-MM-DD') as "create_date"
	    from video
	    where 1=1
	    <if test="condition == 'writer'">
	      and video_writer like '%' || #{keyword} || '%'
	    </if>
	    <if test="condition == 'title'">
	      and video_title like '%' || #{keyword} || '%'
	    </if>
	    <if test="condition == 'content'">
	      and video_content like '%' || #{keyword} || '%'
	    </if>
	  )
</select>

<select id="videoSearchList" resultMap="videoResultSet">
  select
	    video_no,
	    video_title,
	    video_writer,
	    video_content,
	    video_src,
	    to_char(create_date, 'YYYY-MM-DD') as "create_date"
	  from video
	  where 1=1
	  <choose>
	    <when test="condition == 'writer'">
	      and video_writer like '%' || #{keyword} || '%'
	    </when>
	    <when test="condition == 'title'">
	      and video_title like '%' || #{keyword} || '%'
	    </when>
	    <otherwise>
	      and video_content like '%' || #{keyword} || '%'
	    </otherwise>
	  </choose>
	  order by create_date desc
</select>




<!-- 우리반 게시판 목록 조회 (학습자료) -->
<select id="boardListCount" resultType="_int">
	select
		   count(*)
	  from material_board
	 where status = 'Y'
</select>

<select id="boardList" resultMap="materialResultSet">
	select
	       board_no
	     , board_title
	     , board_writer
	     , to_char(create_date, 'YYYY-MM-DD') as "create_date"
	     , count
	     , status
	  from material_board
	 where status = 'Y'
	 order
	    by board_no desc
</select>

<!-- 우리반 게시판 학습자료 목록 조회 -->
<select id="materialList" resultMap="materialResultSet">
	select
	       board_no
	     , board_title
	     , board_writer
	     , to_char(create_date, 'YYYY-MM-DD') as "create_date"
	     , count
	  from material_board
	 where status = 'Y'
	 <if test="searchType != null and keyword != null">
	 	<if test ="searchType eq 'title'">
	 	and board_title like '%' ||  #{keyword} || '%'
	 	
	 	</if>
	 	<if test ="searchType eq 'writer'">
	 	and board_writer like '%' ||  #{keyword} || '%'
	 	</if>
	 </if>
	 order
	    by board_no desc
</select>

<select id="materialListCount" resultType="_int">
	select
		   count(*)
	  from material_board
	  
	 where status = 'Y'
	 <if test="searchType != null and keyword != null">
	 	<if test ="searchType eq 'title'">
	 	and board_title like '%' ||  #{keyword} || '%'
	 	
	 	</if>
	 	<if test ="searchType eq 'writer'">
	 	and board_writer like '%' ||  #{keyword} || '%'
	 	</if>
	 </if>
</select>

<!-- 학습자료 상세 조회 -->
<select id="selectMaterial" resultMap="materialResultSet">
	select
		   board_no
		 , board_title
	     , board_writer
	     , to_char(create_date, 'YYYY-MM-DD') as "create_date"
	     , change_name
	     , origin_name
	     , board_content
	  from material_board
	 where board_no = #{boardNo}
</select>
	<!-- 시험 제출 -->
	<update id="testInsert">
		update exam_answer
		set a1 = #{a1}
		, a2 = #{a2}
		, a3 = #{a3}
		, a4 = #{a4}
		, a5 = #{a5}
		, status = 'Y'
		where test_no = #{testNo} and student_id = #{studentId}
	</update>

	<!-- 공지사항 목록 조회 -->
	<select id="noticeListCount" resultType="_int">
		select
		count(*)
		from notice
		where status = 'Y'
	</select>

	<select id="selectList" resultMap="noticeResultSet">
		select
		board_no
		, board_title
		, board_writer
		, to_char(create_date, 'YYYY-MM-DD') as "create_date"
		, count
		from notice
		where status = 'Y'
		order
		by board_no desc
	</select>

	<!-- 공지사항 상세 조회 -->
	<select id="selectNotice" resultMap="noticeResultSet">
		select
		board_no
		, board_title
		, board_writer
		, to_char(create_date, 'YYYY-MM-DD') as "create_date"
		, board_content
		from notice
		where board_no = #{boardNo}
	</select>

	<!-- 우리반 게시판 목록 조회 (학습자료) -->
	<select id="boardListCount" resultType="_int">
		select
		count(*)
		from material_board
		where status = 'Y'
	</select>

	<select id="boardList" resultMap="materialResultSet">
		select
		board_no
		, board_title
		, board_writer
		, to_char(create_date, 'YYYY-MM-DD') as "create_date"
		, count
		from material_board
		where status = 'Y'
		order
		by board_no desc
	</select>

	<!-- 우리반 게시판 학습자료 목록 조회 -->
	<select id="MaterialList" resultMap="materialResultSet">
		select
		board_no
		, board_title
		, board_writer
		, to_char(create_date, 'YYYY-MM-DD') as "create_date"
		, count
		from material_board
		where status = 'Y'
		order
		by board_no desc
	</select>

	<!-- 우리반 게시판 과제 목록 조회 -->
	<select id="taskList" resultMap="taskResultSet">
		select
		t.task_no
		, t.task_title
		, t.id
		, to_char(t.start_date, 'YYYY-MM-DD') as "start_date"
		, to_char(t.end_date, 'YYYY-MM-DD') as "end_date"
		, subject_no
		, submit_content
		, submit_date
		, ts.status
		from task t
		join task_submit ts on (t.task_no = ts.task_no)
		where student_id = #{id} and t.status = 'N'
		order by t.task_no desc
	</select>

	<!-- 우리반 게시판 과제 제출여부 목록 조회 -->
	<select id="taskSubmitList" resultMap="taskResultSet">
		select
		task_no
		, student_id
		, submit_content
		, submit_date
		, modify_date
		, status
		from task_submit
		where student_id = #{id}
	</select>

	<!-- 과제 상세 조회 -->
	<select id="selectTask" resultMap="taskResultSet">
		select
		t.task_no as "task_no"
		, t.task_title as "task_title"
		, id
		, to_char(start_date, 'YYYY-MM-DD') as "start_date"
		, to_char(end_date, 'YYYY-MM-DD') as "end_date"
		, t.task_content as "task_content"
		, ts.status as "status"
		, ts.submit_content as "submit_content"
		, origin_name
		, change_name
		, end_date
		from task t
		left join task_file tf on (t.task_no = tf.task_no)
		left join task_submit ts on (t.task_no = ts.task_no)
		where t.task_no = #{taskNo}
		and student_id = #{studentId}
		order by t.task_no
	</select>

	<!-- 과제 답글 상세 조회 -->
	<select id="selectTaskReply" resultMap="taskResultSet">
		SELECT
		ts.task_no as "task_no"
		, t.task_title as "task_title"
		, ts.student_id as "student_id"
		, to_char(ts.submit_date, 'YYYY-MM-DD') AS "submit_date"
		, ts.submit_content as "submit_content"
		, t.task_content as "task_content"
		FROM task t
		INNER JOIN task_submit ts ON t.task_no = ts.task_no
		WHERE ts.task_no = #{taskNo} and ts.student_id = #{studentId} and ts.status
		= 'N'
	</select>

	<!-- 과제 답글 삭제 -->
	<update id="deleteTask">
		update task_submit
		set submit_content = NULL
		, submit_date = NULL
		where task_no = #{taskNo} and student_id = #{studentId}
	</update>

	<!-- 과제 답변 등록 -->
	<update id="taskSubmitInsert">
		update task_submit
		set submit_content = #{submitContent}
		, submit_date = sysdate
		where task_no = #{taskNo} and student_id = #{studentId}
	</update>

	<!-- 과제수정 -->
	<update id="updateTask">
		update task_submit
		set submit_content = #{submitContent}
		where task_no = #{taskNo} and student_id = #{studentId}
	</update>

	<!-- 알람조회 -->
	<select id="selectAlarmList" resultMap="alarmResultSet">
		select
		alarm_no
		, id
		, alarm_content
		, alarm_type
		, status
		, create_date
		from alarm
		where id = #{id} and status = 'N'
	</select>

	<!-- 알람 읽음 처리 -->
	<update id="taskAlarmCheck">
		update alarm
		set status = 'Y'
		where alarm_no = #{alarmNo}
	</update>	



<!-- 우리반 게시판 QnA 목록 조회 -->
<select id="qnaList" resultMap="qnaResultSet">
	select
	       board_no
	     , board_title
	     , board_writer
	     , to_char(create_date, 'YYYY-MM-DD') as "create_date"
	     , views
	     , status
	     , count
	  from qna
	 where status = 'Y'
	 <if test="searchType != null and keyword != null">
	 	<if test ="searchType eq 'title'">
	 	and board_title like '%' ||  #{keyword} || '%'
	 	
	 	</if>
	 	<if test ="searchType eq 'writer'">
	 	and board_writer like '%' ||  #{keyword} || '%'
	 	</if>
	 </if>
	 order
	    by board_no desc
</select>

<select id="qnaListCount" resultType="_int">
	select
		   count(*)
	  from qna
	 where status = 'Y'
	 <if test="searchType != null and keyword != null">
	 	<if test ="searchType eq 'title'">
	 	and board_title like '%' ||  #{keyword} || '%'
	 	
	 	</if>
	 	<if test ="searchType eq 'writer'">
	 	and board_writer like '%' ||  #{keyword} || '%'
	 	</if>
	 </if>
</select>

<!-- Q&A 상세 조회 -->
<select id="selectQna" resultMap="qnaResultSet">
	select
		   board_no
		 , board_title
	     , board_writer
	     , to_char(create_date, 'YYYY-MM-DD') as "create_date"
	     , board_content
	     , views
	     , count
	     , status
	  from qna
	 where board_no = #{boardNo}
</select>

<!-- Q&A 게시판 댓글 등록 -->
<insert id="insertReply">
insert
  into reply
     (
       reply_no
     , board_no
     , reply_content
     , reply_writer
     , reply_date
     , status
     , reply_status
     , ref_rno
     )
     values
     (
       seq_rno.nextval
     , #{boardNo}
     , #{replyContent}
     , #{replyWriter}
     , sysdate
     , 'Y'
     , 'N'
     , 0
     )
</insert>

<!-- Q&A 게시판 답댓글 등록 -->
<insert id="insertReReply">
insert
  into reply
     (
       reply_no
     , board_no
     , reply_content
     , reply_writer
     , reply_date
     , status
     , reply_status
     , ref_rno
     )
     values
     (
       seq_rno.nextval
     , #{boardNo}
     , #{replyContent}
     , #{replyWriter}
     , sysdate
     , 'Y'
     , 'N'
     , #{refRno}
     )
</insert>

<select id="selectReplyList" resultMap="replyResultSet">
	select
		   reply_no
		 , reply_writer
		 , reply_content
		 , to_char(reply_date, 'YYYY-MM-DD') as "reply_date"
		 , ref_rno
	 from reply
	 where board_no = #{boardNo}
	 and status = 'Y'
	 START WITH ref_rno = 0
	 CONNECT BY PRIOR reply_no = ref_rno
	</select>

<!-- 마이페이지 내정보 수정 -->
	<update id="updateStudent">
		update
		       member
		   set pwd = #{pwd}
		     , name = #{name}
		     , phone = #{phone}
		     , email = #{email}
		     , birth = #{birth}
		     , post = #{post}
		     , address = #{address}
		     , detail_address = #{detailAddress}
		 where id = #{id}
	</update>

	<!-- 알람등록 -->
	<insert id="insertAlarm">
		insert
		into alarm
		(
		alarm_no
		, id
		, alarm_content
		,
		alarm_type
		, status
		, create_date
		)
		values
		(
		seq_ano.nextval
		, #{id}
		,
		#{alarmContent}
		, #{alarmType}
		, 'N'
		, sysdate
		)
	</insert>

	<!-- 우리반 게시판 QnA 목록 조회 -->
	<select id="qnaList" resultMap="qnaResultSet">
		select
		board_no
		, board_title
		, board_writer
		, to_char(create_date, 'YYYY-MM-DD') as "create_date"
		, count
		from qna
		where status = 'Y'
		order
		by board_no desc
	</select>

	<select id="selectExamResult" resultMap="examResultSet">
		select
		test_no
		, a1
		, a2
		, a3
		, a4
		, a5
		, score
		from exam_answer
		where test_no = #{testNo} and student_id = #{studentId}
	</select>

	<select id="selectExamResultList" resultMap="examResultSet">
	select 
			test_no
		  , a1
		  , a2
		  , a3
		  , a4
		  , a5
		  , score
          , test_title
	from exam_answer
    join exam using (test_no)
	where student_id = #{studentId}
</select>

<select id="selectExamQuestion" resultMap="examResultSet">
	select
			test_no
		  , q1
		  , q2
		  , q3
		  , q4
		  , q5
		  , a1
		  , a2
		  , a3
		  , a4
		  , a5
	from exam_question
	where test_no = #{testNo}
</select>

<insert id="insertQna">
insert
  into qna
     (
      	BOARD_NO
      , BOARD_TITLE
      , BOARD_WRITER
      , BOARD_CONTENT
      , CREATE_DATE
      , VIEWS
      , COUNT
      , STATUS
      ,	ANSWER
     )
     values
     (
       SEQ_QNO.nextval
     , #{boardTitle}
     , #{boardWriter}
     , #{boardContent}
     , sysdate
     , #{views}
     , 0
     , 'Y'
     , 'N'
     )
</insert>

<update id="deleteQna">
	update qna
		set status = 'N'
	where board_no = #{boardNo} and board_writer = #{boardWriter} 
</update>

<update id="updateQna">
	update qna
		set board_title = #{boardTitle}, board_content = #{boardContent}
	where board_no = #{boardNo} and board_writer = #{boardWriter} 
</update>

	<select id="selectExamQuestion" resultMap="examResultSet">
		select
		test_no
		, q1
		, q2
		, q3
		, q4
		, q5
		, a1
		, a2
		, a3
		, a4
		, a5
		from exam_question
		where test_no = #{testNo}
	</select>

	<select id="selectExamIns" resultMap="memberResultSet">
		select
		id
		from exam
		where test_no = #{testNo}
	</select>

	<select id="selectTaskIns" resultMap="memberResultSet">
		select
		id
		from task
		where task_no = #{taskNo}
	</select>
</mapper>













